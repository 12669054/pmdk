#!/bin/bash -e
#
# Copyright 2016, Intel Corporation
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#     * Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# libpmempool_replica_sync/TEST0 -- test for checking replica sync
#
export UNITTEST_NAME=libpmempool_sync/TEST1
export UNITTEST_NUM=1

. ../unittest/unittest.sh

require_fs_type any

setup

# 55MB
DATA_LEN=$((55*1024*1024))

LOG=out${UNITTEST_NUM}.log
LOG_TEMP=out${UNITTEST_NUM}_part.log
rm -rf $LOG && touch $LOG
rm -rf $LOG_TEMP && touch $LOG_TEMP

LAYOUT=OBJ_LAYOUT
POOLSET=$DIR/pool0.set
M=$(( 1024 * 1024 ))
M20=$(( 20 * $M ))
M40=$(( 40 * $M ))
POOL_HEADER_OFFSET=4096
ADDR_MASK=0xFFFFF000
FILES=(testfile1 testfile2 testfile3 testfile4 testfile5)

echo $DIR/${FILES[0]}
# Create poolset
create_poolset $POOLSET\
	20M:$DIR/${FILES[0]}:z:20M:0777\
	20M:$DIR/${FILES[1]}:z:20M:0777\
	21M:$DIR/${FILES[2]}:z:21M:0777\
	R\
	40M:$DIR/${FILES[3]}:z:40M:0777\
	20M:$DIR/${FILES[4]}:z:20M:0777

expect_normal_exit $PMEMPOOL$EXESUFFIX create --layout=$LAYOUT\
	obj $POOLSET
cat $LOG >> $LOG_TEMP


# CLI script for writing some data at 0, 20 and 40 MB
WRITE_SCRIPT=$DIR/write_data
cat << EOF > $WRITE_SCRIPT
pr 55M
srcp 0 TestOK111
srcp 20M TestOK222
srcp 40M TestOK333
EOF

# CLI script for reading 9 characters from 0, 20 and 40 MB offset
READ_SCRIPT=$DIR/read_data
cat << EOF > $READ_SCRIPT
srpr 0 9
srpr 20M 9
srpr 40M 9
EOF

# Write some data into the pool, hitting three part files
expect_normal_exit $PMEMOBJCLI$EXESUFFIX -s $WRITE_SCRIPT $POOLSET >> $LOG_TEMP

# Check if correctly written
expect_normal_exit $PMEMOBJCLI$EXESUFFIX -s $READ_SCRIPT $POOLSET >> $LOG_TEMP

# Delete the second part in the primary replica
rm -f $DIR/${FILES[1]}

# Synchronize replicas
FLAGS=0
expect_normal_exit ./libpmempool_sync$EXESUFFIX $POOLSET $FLAGS >> $LOG
cat $LOG >> $LOG_TEMP

# Check if correctly synchronized
expect_normal_exit $PMEMOBJCLI$EXESUFFIX -s $READ_SCRIPT $POOLSET >> $LOG_TEMP

mv $LOG_TEMP $LOG
check

pass
