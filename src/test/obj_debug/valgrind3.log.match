==$(N)== pmemcheck-$(nW), a simple persistent store checker
==$(N)== Copyright (c) 2014-2015, Intel Corporation
==$(N)== Using Valgrind-$(nW) and LibVEX; rerun with -h for copyright info
==$(N)== Command: ./obj_debug$(nW) $(nW)testfile1 a
==$(N)== Parent PID: $(N)
==$(N)== 
==$(N)== 
==$(N)== Number of stores not made persistent: 0
==$(N)== 
==$(N)== Number of stores made outside of transactions: 5
==$(N)== Stores made outside of transactions:
==$(N)== [0]    at $(nW): constructor_alloc_bytype (obj.c:$(N))
==$(N)==    by $(nW): persist_alloc (pmalloc.c:$(N))
==$(N)==    by $(nW): pmalloc_construct (pmalloc.c:$(N))
==$(N)==    by $(nW): list_insert_new (list.c:$(N))
==$(N)==    by $(nW): obj_alloc_construct (obj.c:$(N))
==$(N)==    by $(nW): pmemobj_alloc (obj.c:$(N))
==$(N)==    by $(nW): test_alloc_construct (obj_debug.c:$(N))
==$(N)==    by $(nW): main (obj_debug.c:$(N))
==$(N)== 	Address: $(nW)	size: $(N)
==$(N)== [1]    at $(nW): constructor_alloc_bytype (obj.c:$(N))
==$(N)==    by $(nW): persist_alloc (pmalloc.c:$(N))
==$(N)==    by $(nW): pmalloc_construct (pmalloc.c:$(N))
==$(N)==    by $(nW): list_insert_new (list.c:$(N))
==$(N)==    by $(nW): obj_alloc_construct (obj.c:$(N))
==$(N)==    by $(nW): pmemobj_alloc (obj.c:$(N))
==$(N)==    by $(nW): test_alloc_construct (obj_debug.c:$(N))
==$(N)==    by $(nW): main (obj_debug.c:$(N))
==$(N)== 	Address: $(nW)	size: $(N)
==$(N)== [2]    at $(nW): int3_constructor (obj_debug.c:$(N))
==$(N)==    by $(nW): constructor_alloc_bytype (obj.c:$(N))
==$(N)==    by $(nW): persist_alloc (pmalloc.c:$(N))
==$(N)==    by $(nW): pmalloc_construct (pmalloc.c:$(N))
==$(N)==    by $(nW): list_insert_new (list.c:$(N))
==$(N)==    by $(nW): obj_alloc_construct (obj.c:$(N))
==$(N)==    by $(nW): pmemobj_alloc (obj.c:$(N))
==$(N)==    by $(nW): test_alloc_construct (obj_debug.c:$(N))
==$(N)==    by $(nW): main (obj_debug.c:$(N))
==$(N)== 	Address: $(nW)	size: $(N)
==$(N)== [3]    at $(nW): int3_constructor (obj_debug.c:$(N))
==$(N)==    by $(nW): constructor_alloc_bytype (obj.c:$(N))
==$(N)==    by $(nW): persist_alloc (pmalloc.c:$(N))
==$(N)==    by $(nW): pmalloc_construct (pmalloc.c:$(N))
==$(N)==    by $(nW): list_insert_new (list.c:$(N))
==$(N)==    by $(nW): obj_alloc_construct (obj.c:$(N))
==$(N)==    by $(nW): pmemobj_alloc (obj.c:$(N))
==$(N)==    by $(nW): test_alloc_construct (obj_debug.c:$(N))
==$(N)==    by $(nW): main (obj_debug.c:$(N))
==$(N)== 	Address: $(nW)	size: $(N)
==$(N)== [4]    at $(nW): int3_constructor (obj_debug.c:$(N))
==$(N)==    by $(nW): constructor_alloc_bytype (obj.c:$(N))
==$(N)==    by $(nW): persist_alloc (pmalloc.c:$(N))
==$(N)==    by $(nW): pmalloc_construct (pmalloc.c:$(N))
==$(N)==    by $(nW): list_insert_new (list.c:$(N))
==$(N)==    by $(nW): obj_alloc_construct (obj.c:$(N))
==$(N)==    by $(nW): pmemobj_alloc (obj.c:$(N))
==$(N)==    by $(nW): test_alloc_construct (obj_debug.c:$(N))
==$(N)==    by $(nW): main (obj_debug.c:$(N))
==$(N)== 	Address: $(nW)	size: $(N)
